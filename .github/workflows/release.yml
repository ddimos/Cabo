name: Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-and-upload:
    runs-on: ${{ matrix.os }}

    strategy:
      # If true, cancel the workflow run if any matrix job fails.
      # If false, continue to run the workflow and complete all matrix jobs, even if one or more jobs fail.
      fail-fast: true
      matrix:
      # TODO make target_name to work with other build and launch types
        platform:
        - { name: Windows, os: windows-latest, c_compiler: cl,    cpp_compiler: cl,      archive_type: zip, archive_extension: zip,    target_name: Release/Cabo_Client.exe }
        - { name: Ubuntu,  os: ubuntu-latest,  c_compiler: gcc,   cpp_compiler: g++,     archive_type: tar, archive_extension: tar.gz, target_name: Cabo_Client     }
        - { name: macOS,   os: macos-latest,   c_compiler: clang, cpp_compiler: clang++, archive_type: tar, archive_extension: tar.gz, target_name: Cabo_Client.app }
        build_type: [Release]
        lib_type:
        # - { name: Shared, flags: -DBUILD_SHARED_LIBS=TRUE  }
        - { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }
        launch_type: 
        - { name: Client, flags: -DLAUNCH_TARGET:STRING=Client }
        # - { name: Server, flags: -DLAUNCH_TARGET:STRING=Server }
        include:
          - platform.name: Windows
            # lib_type.name: Static
            launch_type.name: Client
          - platform.name: Ubuntu
            # lib_type.name: Static
            launch_type.name: Client
          - platform.name: macOS
            # lib_type.name: Static
            launch_type.name: Client

      # matrix:
      #   include:
      #     - os: macos-latest
      #       # c_compiler: clang
      #       cpp_compiler: clang++
      #       input_name: bin/CMakeSFMLProject.app
      #       output_name: CMakeSFMLProject-macos-arm64.app
      #       archive_name: CMakeSFMLProject-macos-arm64.tar.gz
      #       archive_type: tar
      #     - os: ubuntu-latest
      #       # c_compiler: gcc
      #       cpp_compiler: g++
      #       input_name: bin/CMakeSFMLProject
      #       output_name: CMakeSFMLProject-linux-x86_64
      #       archive_name: CMakeSFMLProject-linux-x86_64.tar.gz
      #       archive_type: tar
      #     - os: windows-latest
      #       # c_compiler: cl
      #       cpp_compiler: cl
      #       input_name: bin/Release/CMakeSFMLProject.exe
      #       output_name: CMakeSFMLProject-windows-x86_64.exe
      #       archive_name: CMakeSFMLProject-windows-x86_64.zip
      #       archive_type: zip

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "build-output-name=Cabo_${{matrix.platform.name}}_${{matrix.build_type}}_${{matrix.launch_type.name}}" >> "$GITHUB_OUTPUT"

#      - name: Cache CMake build directory
#        uses: actions/cache@v4
#        with:
#          path: ${{ steps.strings.outputs.build-output-dir }}
#          key: ${{ runner.os }}-build-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/**') }}
#          restore-keys: |
#            ${{ runner.os }}-build-

      - name: Install GNU/Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update 
          sudo apt-get install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        # Set the project version to the tag name instead of git commit.
        # Set "-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}" for C/C++ projects, otherwise use CXX for C++ only projects.
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.platform.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.platform.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ matrix.lib_type.flags }}
          ${{ matrix.launch_type.flags }}
          -DPROJECT_VERSION="${{ github.ref_name }}"
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      # - name: Rename binary
      #   # Rename the binary to match the platform.
      #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #   shell: bash
      #   run: |
      #     echo "Renaming '${{ matrix.input_name }}' to '${{ matrix.output_name }}'"
      #     mv "${{ matrix.input_name }}" "${{ matrix.output_name }}"

      - name: Archive binary
        uses: thedoctor0/zip-release@0.7.6
        with:
          type: ${{ matrix.platform.archive_type }}
          filename: ${{ steps.strings.outputs.build-output-name }}.${{ matrix.platform.archive_extension }} #"${{ matrix.platform.archive_name }}"
          directory: ${{ steps.strings.outputs.build-output-dir }}
          path: ${{ matrix.platform.target_name }}

      - name: Release
        # Upload the binary to the release page.
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.strings.outputs.build-output-dir }}/${{ steps.strings.outputs.build-output-name }}.${{ matrix.platform.archive_extension }}
