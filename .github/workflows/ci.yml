# Taken from https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CI

on: workflow_dispatch

jobs:
  build:
    name: ${{matrix.platform.name}} ${{matrix.build_type}} ${{matrix.lib_type.name}} ${{matrix.launch_type.name}}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows, os: windows-latest, c_compiler: cl,    cpp_compiler: cl    }
        - { name: Ubuntu,  os: ubuntu-latest,  c_compiler: gcc,   cpp_compiler: gcc   }
        - { name: macOS,   os: macos-latest,   c_compiler: clang, cpp_compiler: clang }
        build_type: [Release]
        lib_type:
        # - { name: Shared, flags: -DBUILD_SHARED_LIBS=TRUE  }
        - { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }
        launch_type: 
        - { name: Client, flags: -DLAUNCH_TARGET:STRING=Client }
        # - { name: Server, flags: -DLAUNCH_TARGET:STRING=Server }
        include:
          - platform.name: Windows
            lib_type.name: Static
            launch_type.name: Client
          - platform.name: Ubuntu
            lib_type.name: Static
            launch_type.name: Client
          - platform.name: macOS
            lib_type.name: Static
            launch_type.name: Client
        # exclude:

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update 
        sudo apt-get install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.platform.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.platform.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        ${{ matrix.lib_type.flags }}
        ${{ matrix.launch_type.flags }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.platform.name}} ${{matrix.build_type}} ${{matrix.lib_type.name}} ${{matrix.launch_type.name}}
        path: build
#        path: |
#          build
#          !dist/**/*.md

#    - name: Test
#      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest --build-config ${{ matrix.build_type }}
